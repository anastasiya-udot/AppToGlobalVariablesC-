using System;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media.Animation;
using Microsoft.Win32;

namespace Laba1
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow
    {
        private readonly CheckBox[] _keyBoxs, _languageBoxs;
		public int Counter;

        public void MainWindow()  //1
        {
	    int Counter; 
            string Line;
	    Counter= 2;
	    this.Counter= 3;
            InitializeComponent();
            Counter= this.Counter;
            Processor.Bar = Bar;
            Processor.KasiskeDigrams = KasiskeNew;
            Processor.KasiskeKey = KasiskeText;
            Processor.CheckBoxs.AddRange(_keyBoxs);
            Processor.CheckBoxs.AddRange(_languageBoxs);
// Counter this.Counter
/* this.counter
    this.Counter*/
Writeline("this.counter");
    
            TbMain.Focus();
        }

        private void Cb_Checked(object sender, RoutedEventArgs)  //2
        {
            for (var i = 0; i < 3; i++)
            {
                _keyBoxs[i].IsChecked = Equals(_keyBoxs[i], e.Source);
            }
        }

        private void CbLang_Checked(object sender, RoutedEventArgs)  //3
        {
            if (Equals(e.OriginalSource, _languageBoxs[1]))
            {
                _languageBoxs[0].IsChecked = false;
            }
            else
            {
                _languageBoxs[1].IsChecked = false;
            }
        }
        
        private void BKasiske_MouseLeftButtonDown(object sender, MouseButtonEventArgs)  //4
        {
            DoubleAnimation da, dw;
            switch (LKasiske.Text)
            {
                case ">":
                    LKasiske.Text = "<";
                    da = new DoubleAnimation()
                    {
                        From = Width,
                        To = Width + 200,
                        Duration = TimeSpan.FromSeconds(1),
                    };
                    dw = new DoubleAnimation()
                    {
                        From = Left,
                        To = Left - 100,
                        Duration = TimeSpan.FromSeconds(1),
                    };
                    WMain.BeginAnimation(WidthProperty, da);
                    WMain.BeginAnimation(LeftProperty, dw);
                    break;
                case "<":
                    LKasiske.Text = ">";
                    da = new DoubleAnimation()
                    {
                        From = Width,
                        To = Width - 200,
                        Duration = TimeSpan.FromSeconds(1),
                    };
                    dw = new DoubleAnimation()
                    {
                        From = Left,
                        To = Left + 100,
                        Duration = TimeSpan.FromSeconds(1),
                    };
                    WMain.BeginAnimation(WidthProperty, da);
                    WMain.BeginAnimation(LeftProperty, dw);
                    break;
            }
        }

        private void Analize_Click(object sender, RoutedEventArgs)  //5
        {
            Processor.DigramLength = Processor.MinDigramLength;
            if (!(CbRu.IsChecked == true || CbEn.IsChecked == true))
            {
                MessageBox.Show("Не выбран язык", "Внимание, ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            Processor.Lang = CbRu.IsChecked == true ? Languages.Ru : Languages.Eng;
            KasiskeText.Text = "";
            KasiskeNew.Text = "";
            Processor.AnalizeText = TbCrypto.Text;
            Bar.Maximum = Processor.AnalizeText.Length - Processor.DigramLength + 501;
            Analizer.AnalizeCrypto();
        }

        private void Coding_Click(object sender, RoutedEventArgs)  //6
        {
            if (!(Cb1.IsChecked == true || Cb2.IsChecked == true || Cb3.IsChecked == true))
            {
                MessageBox.Show("Не выбран тип ключа", "Внимание, ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            Processor.Task = Cb1.IsChecked == true
                ? Keys.Straight : Cb2.IsChecked == true ? Keys.Progressive : Keys.Auto;

            if (!(CbRu.IsChecked == true || CbEn.IsChecked == true))
            {
                MessageBox.Show("Не выбран язык", "Внимание, ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            Processor.Lang = CbRu.IsChecked == true ? Languages.Ru : Languages.Eng;

            switch (Processor.Lang)
            {
                case Languages.Ru:
                    Processor.Key =
                        TbKey.Text.Where(t => Processor.RussianText.Contains(t))
                            .Aggregate("", (current, t) => current + t).ToLower();
                    Processor.Text = TbMain.Text.Where(t => Processor.RussianText.Contains(t))
                        .Aggregate("", (current, t) => current + t);
                    break;
                case Languages.Eng:
                    Processor.Key =
                        TbKey.Text.Where(t => Processor.EnglishText.Contains(t))
                            .Aggregate("", (current, t) => current + t).ToLower();
                    Processor.Text = TbMain.Text.Where(t => Processor.EnglishText.Contains(t))
                        .Aggregate("", (current, t) => current + t);
                    break;
            }


            if (Processor.Text.Length == 0 || Processor.Key.Length == 0) return;

            ExtendedKeyText.Text =
                Processor.Key =
                    Processor.KeyPreparation(Processor.Key, Processor.Task, Processor.Text, Processor.Lang).ToLower();

            if (Processor.Text.Length == 0 || Processor.Key.Length == 0) return;

            Bar.Maximum = Processor.Text.Where(char.IsLetter).Aggregate("", (curent, t) => curent + t).Length;
            TbCrypto.Text = Processor.Cipertext = "";
            Processor.Goal = TbCrypto;
            
            Coder.Coding();
        }

        private void Decoding_Click(object sender, RoutedEventArgs)  //7
        {
            if (!(Cb1.IsChecked == true || Cb2.IsChecked == true || Cb3.IsChecked == true))
            {
                MessageBox.Show("Не выбран тип ключа", "Внимание, ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            Processor.Task = Cb1.IsChecked == true
                ? Keys.Straight : Cb2.IsChecked == true ? Keys.Progressive : Keys.Auto;

            if (!(CbRu.IsChecked == true || CbEn.IsChecked == true))
            {
                MessageBox.Show("Не выбран язык", "Внимание, ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            Processor.Lang = CbRu.IsChecked == true ? Languages.Ru : Languages.Eng;

            switch (Processor.Lang)
            {
                case Languages.Ru: //ru
                    Processor.Key =
                        TbKey.Text.Where(t => Processor.RussianText.Contains(t))
                            .Aggregate("", (current, t) => current + t).ToLower();
                    Processor.Text = TbCrypto.Text.Where(t => Processor.RussianText.Contains(t))
                        .Aggregate("", (current, t) => current + t);
                    break;
                case Languages.Eng: //en
                    Processor.Key =
                        TbKey.Text.Where(t => Processor.EnglishText.Contains(t))
                            .Aggregate("", (current, t) => current + t).ToLower();
                    Processor.Text = TbCrypto.Text.Where(t => Processor.EnglishText.Contains(t))
                        .Aggregate("", (current, t) => current + t);
                    break;
            }
            Processor.KeyLen = Processor.Key.Length;

            if (Processor.Text.Length == 0 || Processor.Key.Length == 0) return;

            Processor.Key =
                Processor.KeyPreparation(Processor.Key, Processor.Task, Processor.Text, Processor.Lang).ToLower();

            switch (Processor.Task)
            {
                case Keys.Straight:
                case Keys.Progressive:
                    ExtendedKeyText.Text = Processor.Key;
                    break;
                case Keys.Auto:
                    ExtendedKeyText.Text = "Нельзя определить до частичной расшифровки текста!";
                    break;
            }

            if (Processor.Text.Length == 0 || Processor.Key.Length == 0) return;

            Bar.Maximum = Processor.Text.Where(char.IsLetter).Aggregate("", (curent, t) => curent + t).Length;
            TbMain.Text = Processor.Cipertext = "";
            Processor.Goal = TbMain;

            Decoder.Decoding();
        }

        private void BOpen_Click(object sender, RoutedEventArgs)  //8
        {
            var mbr = MessageBox.Show("Вы открываете исходный текст(да) или шифротекст(нет)?", "Подтвердите действие!",
                MessageBoxButton.YesNoCancel, MessageBoxImage.Question, MessageBoxResult.Yes,
                MessageBoxOptions.RightAlign);

            if (mbr == MessageBoxResult.Cancel) return;

            var ofd = new OpenFileDialog
            {
                Title = "Открыть файл",
                Multiselect = false,
                InitialDirectory = @"E:\Programs\VS\_TI\Laba1\",
                Filter = "Текстовые файлы (*.txt)|*.txt",
                FilterIndex = 1
            };

            if (ofd.ShowDialog() != true) return;

            var path = ofd.FileNames[0];

            var inStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read, 8,
                FileOptions.SequentialScan);

            var br = new StreamReader(inStream, Encoding.UTF8, false, 8, false);

            var s = br.ReadToEnd();

            br.Close();

            switch (mbr)
            {
                case MessageBoxResult.Yes:
                    TbMain.Text = s;
                    break;
                case MessageBoxResult.No:
                    TbCrypto.Text = s;
                    break;
                case MessageBoxResult.Cancel:
                    return;
            }
        }

        private void BSave_Click(object sender, RoutedEventArgs)  //9
        {
            var mbr = MessageBox.Show("Вы хотите сохранить исходный текст(да) или шифротекст(нет)?",
                "Подтвердите действие!", MessageBoxButton.YesNoCancel, MessageBoxImage.Question, MessageBoxResult.Yes,
                MessageBoxOptions.RightAlign);

            if (mbr == MessageBoxResult.Cancel) return;

            var ofd = new SaveFileDialog
            {
                Title = "Cохранить файл",
                InitialDirectory = @"E:\Programs\VS\_TI\Laba1\",
                Filter = "Текстовые файлы (*.txt)|*.txt",
                FilterIndex = 1
            };

            if (ofd.ShowDialog() != true) return;
            

            var path = ofd.FileNames[0];

            var outStream = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.ReadWrite, 8,
                FileOptions.WriteThrough);

            var bw = new StreamWriter(outStream, Encoding.UTF8, 8, false);

            switch (mbr)
            {
                case MessageBoxResult.Yes:
                    bw.Write(TbMain.Text);
                    break;
                case MessageBoxResult.No:
                    bw.Write(TbCrypto.Text);
                    break;
            }
            bw.Close();
        }

        private void DopAnaliz_Click(object sender, RoutedEventArgs)  //10
        { 
            if (KasiskeText.Text.Trim()=="") return;
            var length = KasiskeText.Text[24] - '0';
            if (char.IsDigit(KasiskeText.Text[25]))
            {
                length *= 10;
                length += KasiskeText.Text[25] - '0';
            }
            var dopAnaliz = new DopAnaliz(TbCrypto.Text, length, CbRu.IsChecked == true ? Languages.Ru : Languages.Eng);
            dopAnaliz.Show();
        }

        private void WMain_Closing(object sender, CancelEventArgs)  //11
        {
            Application.Current.Shutdown();
        }
    }



    public class Doubles
    {
        public char Letter;
        public double Frequency;
    }

    /// <summary>
    /// Вычислительное ядро
    /// </summary>
    public class Processor
    {

        public const int MinDigramLength = 5;

        public static int DigramLength, KeyLen;

        public static string Key, Cipertext, AnalizeText, AnalizeResult, AnalizeLog;

        public static int Nod(int a, int b)  //12
        {
            while (true)
            {
                if (b == 0) return a;
                var a1 = a;
                a = b;
                b = a1%b;
            }
        }

        public static string KeyPreparation(string key, keyType, string text, Languages)  //13
        {
            switch (keyType)
            {
                case Keys.Straight:
                    while (key.Length < text.Length)
                    {
                        key += key;
                    }
                    if (key.Length > text.Length)
                    {
                        key = key.Substring(0, text.Length);
                    }
                    break;
                case Keys.Progressive:
                    var s = key;
                    while (key.Length < text.Length)
                    {
                        if (lang == Languages.Eng)
                        {
                            s = s.Where(c => c != ' ')
                                .Aggregate("", (current, c) => current + SmlEng[(c - 'a' + 1)%26]);
                        }
                        else
                        {
                            s = s.Where(c => c != ' ')
                                .Aggregate("",
                                    (current, c) => current + SmlRus[(Regex.Match(SmlRus, c.ToString()).Index + 1)%33]);
                        }
                        key += s;
                    }
                    if (key.Length > text.Length)
                    {
                        key = key.Substring(0, text.Length);
                    }
                    break;
                case Keys.Auto:
                    key += text.Substring(0, text.Length - key.Length);
                    break;
            }
            return key;
        }


        public static string IncString(string digram)  //14
        {
            if (Lang == Languages.Ru)
                return digram.Where(char.IsLetter)
                    .Aggregate("",
                        (current, c) =>
                            current + SmlRus[(Regex.Match(SmlRus, c.ToString(), RegexOptions.IgnoreCase).Index + 1)%33]);
            return digram.Where(char.IsLetter)
                .Aggregate("",
                    (current, c) =>
                        current + SmlEng[(Regex.Match(SmlEng, c.ToString(), RegexOptions.IgnoreCase).Index + 1)%26]);
        }

        public static void DeactivateElements()  //15
        {
            foreach (var Object in Buttons)
            {
                Object.IsEnabled = !Object.IsEnabled;
            }
            foreach (var Object in TextBoxs)
            {
                Object.IsEnabled = !Object.IsEnabled;
            }
            foreach (var Object in CheckBoxs)
            {
                Object.IsEnabled = !Object.IsEnabled;
            }
        }

        public static string GenerateKey(string text, int keyLength)  //16
        {
            var key = "";
            var strings = new string[keyLength];
            for (var i = 0; i < text.Length; i++)
            {
                strings[i%keyLength] += Task == Keys.Straight
                    ? text[i]
                    : Lang == Languages.Ru
                        ? SmlRus[(SmlRus.IndexOf(char.ToLower(text[i])) + SmlRus.Length - (i/keyLength)%SmlRus.Length)%SmlRus.Length]
                        : SmlEng[(SmlEng.IndexOf(char.ToLower(text[i])) + SmlEng.Length - (i/keyLength)%SmlEng.Length)%SmlEng.Length];
            }
            for (var i = 0; i < keyLength; i++)
            {
                strings[i] = strings[i].ToLower();
            }
            for (var i = 0; i < keyLength; i++)
            {
                var frequency = new Frequency[SmlRus.Length];
                if (Lang == Languages.Ru)
                {
                    for (var j = 0; j < strings[i].Length; j++)
                    {
                        frequency[SmlRus.IndexOf(strings[i][j])].Count++;
                        frequency[SmlRus.IndexOf(strings[i][j])].Letter = strings[i][j];
                    }
                    frequency = frequency.OrderByDescending(p => p.Count).ToArray();
                    var number =
                        Math.Abs(SmlRus.IndexOf(frequency[0].Letter) + 33 - SmlRus.IndexOf(RusDoubles[0].Letter))%33;
                    key += SmlRus[number];
                }
                else
                {
                    for (var j = 0; j < strings[i].Length; j++)
                    {
                        frequency[SmlEng.IndexOf(strings[i][j])].Count++;
                        frequency[SmlEng.IndexOf(strings[i][j])].Letter = strings[i][j];
                    }
                    frequency = frequency.OrderByDescending(p => p.Count).ToArray();
                    var number =
                        Math.Abs(SmlEng.IndexOf(frequency[0].Letter) + 26 - SmlEng.IndexOf(EngDoubles[0].Letter)) % 26;
                    key += SmlEng[number];
                }
            }
            return key;
        }
    }
	
	public partial class DopAnaliz 
    {
        private readonly CheckBox[] _keyType;
        private readonly List<ComboBox> _keyLetters = new List<ComboBox>();
        public string Text;
        public int Length;
        public readonly Languages Lang;
        private readonly FileInfo 
            _eng = new FileInfo(@"E:\Programs\VS\_TI\Laba1\TI_Laba1\Eng.txt"), 
            _rus = new FileInfo(@"E:\Programs\VS\_TI\Laba1\TI_Laba1\Rus.txt");

        public void DopAnaliz(string text, int length, Languages)  //17
        {
            Text = text;
            Length = length;
            Lang = lang;
            InitializeComponent();
            ReadDoubles();
            var key = Processor.GenerateKey(Text, Length);
            InitializeKey(key);
            _keyType = new[] {CbProgressive, CbStraight};
        }

        private void ReadDoubles()  //18
        {
            var stream = _rus.OpenRead();
            var read = new StreamReader(stream);
            var i = 0;
            foreach (var number in read.ReadToEnd().Split('\n').ToList())
            {
                Processor.RusDoubles.Add(new Doubles(){Frequency = double.Parse(number),Letter = Processor.SmlRus[i++]});
            }
            Processor.RusDoubles = Processor.RusDoubles.OrderByDescending(p => p.Frequency).ToList();
            stream = _eng.OpenRead();
            read = new StreamReader(stream);
            i = 0;
            foreach (var number in read.ReadToEnd().Split('\n').ToList())
            {
                Processor.EngDoubles.Add(new Doubles(){Frequency = double.Parse(number),Letter = Processor.SmlEng[i++]});
            }
            Processor.EngDoubles = Processor.EngDoubles.OrderByDescending(p => p.Frequency).ToList();
        }

        private void InitializeKey(string key)  //19
        {
            var count = 0;
            foreach (var c in key)
            {
                var letter = new ComboBox
                {
                    HorizontalAlignment = HorizontalAlignment.Left,
                    VerticalAlignment = VerticalAlignment.Top,
                    Width = 40
                };
                GKey.Children.Add(letter);
                Grid.SetColumn(letter, count%10);
                Grid.SetRow(letter, count/10);
                _keyLetters.Add(letter);
                var number = -1;
                for (var i = 0; i < (Lang == Languages.Ru ? Processor.SmlRus.Length : Processor.SmlEng.Length); i++)
                {
                    var temp = Lang == Languages.Ru ? Processor.SmlRus[i] : Processor.SmlEng[i];
                    letter.Items.Add(temp);
                    if (c == temp)
                        number = i;
                }
                letter.SelectedIndex = number;
                count++;
            }
        }

        private string BuildKey()  //20
        {
            return _keyLetters.Aggregate("", (current, letter) => current + letter.Text);
        }

        private void Decoding(object sender, RoutedEventArgs)  //21
        {
            if (!(CbProgressive.IsChecked == true || CbStraight.IsChecked == true))
            {
                MessageBox.Show("Не выбран тип ключа", "Внимание, ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            Processor.Text = Text;
            Processor.Lang = Lang;
            Processor.Key = Processor.KeyPreparation(BuildKey(),
                CbProgressive.IsChecked == true ? Keys.Progressive : Keys.Straight, Text, Lang);
            Processor.Goal = TbSourceText;
            Processor.Cipertext = "";
            Decoder.Decoding();
        }

        private void Cb_Checked(object sender, RoutedEventArgs)  //22
        {
            for (var i = 0; i < 2; i++)
            {
                _keyType[i].IsChecked = Equals(_keyType[i], e.Source);
            }
        }
    }
	
	public class Decoder
    {
        public static void Decoding()  //23
        {
            var decoder = new BackgroundWorker { WorkerReportsProgress = true };
            decoder.DoWork += decoder_DoWork;
            decoder.ProgressChanged += decoder_ProgressChanged;
            decoder.RunWorkerCompleted += decoder_RunWorkerCompleted;
            decoder.RunWorkerAsync();
        }

        private static void decoder_DoWork(object sender, DoWorkEventArgs)  //24
        {
            var i = 0;
            switch (Processor.Lang)
            {
                case Languages.Ru:
                    switch (Processor.Task)
                    {
                        case Keys.Straight:
                        case Keys.Progressive:
                            foreach (var c in Processor.Text.Where(char.IsLetter))
                            {
                                var reg = new Regex(Processor.Key[i].ToString());
                                var reg1 = new Regex(c.ToString());
                                Processor.Cipertext += char.IsLower(c)
                                    ? Processor.SmlRus[((reg1.Match(Processor.SmlRus).Index) + 33 - reg.Match(Processor.SmlRus).Index) % 33]
                                    : Processor.BigRus[((reg1.Match(Processor.BigRus).Index) + 33 - reg.Match(Processor.SmlRus).Index) % 33];
                                i++;
                                (sender as BackgroundWorker).ReportProgress(i);
                            }
                            break;
                        case Keys.Auto:
                            for (i = 0; i < Processor.KeyLen; i++)
                            {
                                var c = Processor.Text[i];
                                var reg = new Regex(Processor.Key[i].ToString());
                                var reg1 = new Regex(c.ToString());
                                Processor.Cipertext += char.IsLower(c)
                                    ? Processor.SmlRus[(reg1.Match(Processor.SmlRus).Index + 33 - reg.Match(Processor.SmlRus).Index) % 33]
                                    : Processor.BigRus[(reg1.Match(Processor.BigRus).Index + 33 - reg.Match(Processor.SmlRus).Index) % 33];
                                (sender as BackgroundWorker).ReportProgress(i);
                            }
                            for (; i < Processor.Text.Length; i++)
                            {
                                var c = Processor.Text[i];
                                var reg = new Regex(Processor.Cipertext.ToLower()[i - Processor.KeyLen].ToString());
                                var reg1 = new Regex(c.ToString());
                                Processor.Cipertext += char.IsLower(c)
                                    ? Processor.SmlRus[(reg1.Match(Processor.SmlRus).Index + 33 - reg.Match(Processor.SmlRus).Index) % 33]
                                    : Processor.BigRus[(reg1.Match(Processor.BigRus).Index + 33 - reg.Match(Processor.SmlRus).Index) % 33];
                                (sender as BackgroundWorker).ReportProgress(i);
                            }
                            break;
                    }
                    break;
                case Languages.Eng:
                    switch (Processor.Task)
                    {
                        case Keys.Straight:
                        case Keys.Progressive:
                            foreach (var c in Processor.Text.Where(char.IsLetter))
                            {
                                Processor.Cipertext += char.IsLower(c)
                                    ? Processor.SmlEng[((c - 'a') + 104 - (Processor.Key[i] - 'a')) % 26]
                                    : Processor.BigEng[((c - 'A') + 104 - (Processor.Key[i] - 'a')) % 26];
                                i++;
                                (sender as BackgroundWorker).ReportProgress(i);
                            }
                            break;
                        case Keys.Auto:
                            for (i = 0; i < Processor.KeyLen; i++)
                            {
                                var c = Processor.Text[i];
                                Processor.Cipertext += char.IsLower(c)
                                    ? Processor.SmlEng[((c - 'a') + 104 - (Processor.Key[i] - 'a')) % 26]
                                    : Processor.BigEng[((c - 'A') + 104 - (Processor.Key[i] - 'a')) % 26];
                                (sender as BackgroundWorker).ReportProgress(i);
                            }
                            for (; i < Processor.Text.Length; i++)
                            {
                                var c = Processor.Text[i];
                                Processor.Cipertext += char.IsLower(c)
                                    ? Processor.SmlEng[((c - 'a') + 104 - (Processor.Cipertext.ToLower()[i - Processor.KeyLen] - 'a')) % 26]
                                    : Processor.BigEng[((c - 'A') + 104 - (Processor.Cipertext.ToLower()[i - Processor.KeyLen] - 'a')) % 26];
                                (sender as BackgroundWorker).ReportProgress(i);
                            }
                            break;
                    }
                    break;
            }
        }

        private static void decoder_ProgressChanged(object sender, ProgressChangedEventArgs)  //25
        {
            Processor.Bar.Value = e.ProgressPercentage;
        }

        private static void decoder_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs)  //26
        {
            Processor.Goal.Text = Processor.Cipertext;
        } 
    }
	
	public class Coder
    {
        public static void Coding()  //27
        {
            var coder = new BackgroundWorker { WorkerReportsProgress = true };
            coder.DoWork += coder_DoWork;
            coder.ProgressChanged += coder_ProgressChanged;
            coder.RunWorkerCompleted += coder_RunWorkerCompleted;
            coder.RunWorkerAsync();
        }

        private static void coder_DoWork(object sender, DoWorkEventArgs)  //28
        {
            var i = 0;
            switch (Processor.Lang)
            {
                case Languages.Ru:
                    foreach (var c in Processor.Text.Where(char.IsLetter))
                    {
                        var reg = new Regex(Processor.Key[i].ToString());
                        var reg1 = new Regex(c.ToString());
                        Processor.Cipertext += char.IsLower(c)
                            ? Processor.SmlRus[((reg1.Match(Processor.SmlRus).Index) + reg.Match(Processor.SmlRus).Index) % 33]
                            : Processor.BigRus[((reg1.Match(Processor.BigRus).Index) + reg.Match(Processor.SmlRus).Index) % 33];
                        i++;
                        (sender as BackgroundWorker).ReportProgress(i);
                    }
                    break;
                case Languages.Eng:
                    foreach (var c in Processor.Text.Where(char.IsLetter))
                    {
                        Processor.Cipertext += char.IsLower(c)
                            ? Processor.SmlEng[((c - 'a') + (Processor.Key[i] - 'a')) % 26]
                            : Processor.BigEng[((c - 'A') + (Processor.Key[i] - 'a')) % 26];
                        i++;
                        (sender as BackgroundWorker).ReportProgress(i);
                    }
                    break;
            }
        }

        private static void coder_ProgressChanged(object sender, ProgressChangedEventArgs)  //29
        {
            Processor.Bar.Value = e.ProgressPercentage;
        }

        private static void coder_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs)  //30
        {
            Processor.Goal.Text = Processor.Cipertext;
        } 
    }
	
	public class Analizer 
    {
        public static void AnalizeCrypto()  //31
        {
            var analizer = new BackgroundWorker { WorkerReportsProgress = true };
            analizer.DoWork += analizer_DoWork;
            analizer.ProgressChanged += analizer_ProgressChanged;
            analizer.RunWorkerCompleted += analizer_RunWorkerCompleted;
            analizer.RunWorkerAsync();
            Processor.DeactivateElements();
        }

        private static void analizer_DoWork(object sender, DoWorkEventArgs)  //32
        {
            Processor.AnalizeResult = Processor.AnalizeLog = "";
            var sum = 0;
            var ans = new List<Pair>();
            var generalDistanses = new List<int>();
            while (sum == 0)
            {
                Processor.AnalizeResult = "";
                Processor.AnalizeLog = "";
                generalDistanses.Clear();
                if (Processor.DigramLength > 20)
                {
                    Processor.AnalizeResult = "невозможно определить длинну ключа";
                    (sender as BackgroundWorker).ReportProgress(Processor.AnalizeText.Length - Processor.DigramLength + 1001);
                    return;
                }
                Processor.DigramLength++;

                var generalNod = new int[10000];
                var usedDigrams = new HashSet<string>();
                var privateDistanses = new List<int>();
                for (var i = 0; i < Processor.AnalizeText.Length - Processor.DigramLength + 1; i++)
                {
                    privateDistanses.Clear();
                    (sender as BackgroundWorker).ReportProgress(i + 1);

                    if (Processor.Task != Keys.Progressive)
                    {
                        var myMatch = Processor.Find(Processor.AnalizeText, Processor.AnalizeText.Substring(i, Processor.DigramLength).ToLower());
                        if (myMatch.Count < 2 || usedDigrams.Contains(myMatch[0].Value)) continue;
                        Processor.AnalizeLog += myMatch[0].Value + ' ';
                        for (var j = 0; j < myMatch.Count - 1; j++)
                        {
                            Processor.AnalizeLog += j != myMatch.Count - 2
                                ? (myMatch[j + 1].Index - myMatch[j].Index) + ", "
                                : (myMatch[j + 1].Index - myMatch[j].Index).ToString();
                            privateDistanses.Add(myMatch[j + 1].Index - myMatch[j].Index);
                        }
                    }
                    else
                    {
                        var match = Processor.FindProgressive(Processor.AnalizeText, Processor.AnalizeText.Substring(i, Processor.DigramLength));
                        if (match.Count() < 2 || usedDigrams.Contains(Processor.AnalizeText.Substring(i, Processor.DigramLength).ToLower()))
                            continue;
                        var temp = Processor.AnalizeText.Substring(i, Processor.DigramLength);
                        for (var j = 0; j < (Processor.Lang == Languages.Ru ? Processor.SmlRus.Length : Processor.SmlEng.Length) - 1; j++)
                        {
                            temp = Processor.IncString(temp);
                            usedDigrams.Add(temp);
                        }
                        Processor.AnalizeLog += Processor.AnalizeText.Substring(i, Processor.DigramLength) + ' ';
                        for (var j = 0; j < match.Count() - 1; j++)
                        {
                            Processor.AnalizeLog += j != match.Count() - 2
                                ? (match[j + 1] - match[j]) + ", "
                                : (match[j + 1] - match[j]).ToString();
                            privateDistanses.Add(match[j + 1] - match[j]);
                        }
                    }

                    var privateNod = privateDistanses[0];
                    for (var j = 1; j < privateDistanses.Count; j++)
                    {
                        privateNod = Processor.Nod(privateNod, privateDistanses[j]);
                    }
                    generalDistanses.Add(privateNod);
                    if (privateDistanses.Count != 1)
                        Processor.AnalizeLog += "\nНОД: " + privateNod + "\n\n";
                    else
                    {
                        Processor.AnalizeLog += "\nРезультат: " + privateNod + "\n\n";
                    }
                    usedDigrams.Add(Processor.AnalizeText.Substring(i, Processor.DigramLength).ToLower());
                }
			}
        }

        private static void analizer_ProgressChanged(object sender, ProgressChangedEventArgs)  //33
        {
            Processor.Bar.Value = e.ProgressPercentage;
        }

        private static void analizer_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs) //34
        {
            Processor.KasiskeKey.Text = Processor.AnalizeResult;
            Processor.KasiskeDigrams.Text = Processor.AnalizeLog;
            Processor.DigramLength = Processor.MinDigramLength;
            Processor.DeactivateElements();
        }
    }
}
